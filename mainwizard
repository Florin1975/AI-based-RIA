import React, { useState } from 'react';
import { 
  Stepper, 
  Step, 
  StepLabel, 
  Button, 
  Typography, 
  Box, 
  Paper,
  Container,
  Grid
} from '@mui/material';
import ProjectInfoForm from './steps/ProjectInfoForm';
import RegulatoryContextForm from './steps/RegulatoryContextForm';
import DocumentUploadForm from './steps/DocumentUploadForm';
import StakeholderAnalysisForm from './steps/StakeholderAnalysisForm';
import ImpactAssessmentForm from './steps/ImpactAssessmentForm';
import CostBenefitAnalysisForm from './steps/CostBenefitAnalysisForm';
import ReportGenerationForm from './steps/ReportGenerationForm';

const steps = [
  'Project Information',
  'Regulatory Context',
  'Document Upload',
  'Stakeholder Analysis',
  'Impact Assessment',
  'Cost-Benefit Analysis',
  'Report Generation'
];

const RiaWizard = () => {
  const [activeStep, setActiveStep] = useState(0);
  const [formData, setFormData] = useState({
    projectInfo: {},
    regulatoryContext: {},
    documents: { uploadedDocuments: [] },
    stakeholders: { identifiedStakeholders: [] },
    impacts: {
      economicImpacts: [],
      socialImpacts: [],
      environmentalImpacts: [],
      governanceImpacts: []
    },
    costBenefit: {
      costs: [],
      benefits: [],
      monetaryValues: {}
    },
    report: {}
  });
  const [completed, setCompleted] = useState({});

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleComplete = (stepData) => {
    const newCompleted = { ...completed };
    newCompleted[activeStep] = true;
    setCompleted(newCompleted);
    
    // Update form data
    const newFormData = { ...formData };
    switch (activeStep) {
      case 0:
        newFormData.projectInfo = stepData;
        break;
      case 1:
        newFormData.regulatoryContext = stepData;
        break;
      case 2:
        newFormData.documents = stepData;
        break;
      case 3:
        newFormData.stakeholders = stepData;
        break;
      case 4:
        newFormData.impacts = stepData;
        break;
      case 5:
        newFormData.costBenefit = stepData;
        break;
      case 6:
        newFormData.report = stepData;
        break;
      default:
        break;
    }
    setFormData(newFormData);
    
    // Move to next step if not the last step
    if (activeStep !== steps.length - 1) {
      handleNext();
    }
  };

  const getStepContent = (step) => {
    switch (step) {
      case 0:
        return <ProjectInfoForm onComplete={handleComplete} initialData={formData.projectInfo} />;
      case 1:
        return <RegulatoryContextForm onComplete={handleComplete} initialData={formData.regulatoryContext} />;
      case 2:
        return <DocumentUploadForm onComplete={handleComplete} initialData={formData.documents} />;
      case 3:
        return <StakeholderAnalysisForm onComplete={handleComplete} initialData={formData.stakeholders} />;
      case 4:
        return <ImpactAssessmentForm onComplete={handleComplete} initialData={formData.impacts} />;
      case 5:
        return <CostBenefitAnalysisForm onComplete={handleComplete} initialData={formData.costBenefit} />;
      case 6:
        return <ReportGenerationForm onComplete={handleComplete} initialData={formData.report} formData={formData} />;
      default:
        return 'Unknown step';
    }
  };

  return (
    <Container maxWidth="lg">
      <Paper elevation={3} sx={{ p: 4, mt: 4, mb: 4 }}>
        <Typography variant="h4" component="h1" align="center" gutterBottom>
          Regulatory Impact Assessment Tool
        </Typography>
        
        <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>
          {steps.map((label, index) => {
            const stepProps = {};
            const labelProps = {};
            
            return (
              <Step key={label} {...stepProps} completed={completed[index]}>
                <StepLabel {...labelProps}>{label}</StepLabel>
              </Step>
            );
          })}
        </Stepper>
        
        <Box sx={{ mt: 2, mb: 2 }}>
          {getStepContent(activeStep)}
        </Box>
        
        <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>
          <Button
            color="inherit"
            disabled={activeStep === 0}
            onClick={handleBack}
            sx={{ mr: 1 }}
          >
            Back
          </Button>
          <Box sx={{ flex: '1 1 auto' }} />
          {activeStep !== steps.length - 1 && (
            <Button 
              variant="contained" 
              color="primary"
              onClick={() => {
                document.getElementById('step-form-submit')?.click();
              }}
            >
              {activeStep === steps.length - 1 ? 'Finish' : 'Save & Continue'}
