import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';
import { Card, CardHeader, CardContent, Typography } from '@mui/material';

const CostBenefitChart = ({ data, timeframe = 5 }) => {
  const chartRef = useRef(null);
  
  useEffect(() => {
    if (!data || !chartRef.current) return;
    
    // Clear previous chart
    d3.select(chartRef.current).selectAll('*').remove();
    
    // Chart dimensions
    const margin = { top: 40, right: 80, bottom: 60, left: 80 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    
    // Create SVG
    const svg = d3.select(chartRef.current)
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
    
    // Prepare data
    const years = Array.from({ length: timeframe }, (_, i) => i + 1);
    
    const costsData = years.map(year => ({
      year,
      value: data.costs.reduce((sum, cost) => {
        const yearlyValue = cost.isRecurring ? cost.value : (year === 1 ? cost.value : 0);
        return sum + yearlyValue;
      }, 0)
    }));
    
    const benefitsData = years.map(year => ({
      year,
      value: data.benefits.reduce((sum, benefit) => {
        // Apply ramp-up factor for benefits (benefits often increase over time)
        const rampUpFactor = Math.min(1, year / 3); // Full benefits after 3 years
        const yearlyValue = benefit.isRecurring ? benefit.value * rampUpFactor : (year === 1 ? benefit.value : 0);
        return sum + yearlyValue;
      }, 0)
    }));
    
    const cumulativeCostsData = years.map((year, i) => ({
      year,
      value: costsData.slice(0, i + 1).reduce((sum, d) => sum + d.value, 0)
    }));
    
    const cumulativeBenefitsData = years.map((year, i) => ({
      year,
      value: benefitsData.slice(0, i + 1).reduce((sum, d) => sum + d.value, 0)
    }));
    
    // Scales
    const xScale = d3.scaleBand()
      .domain(years)
      .range([0, width])
      .padding(0.2);
    
    const yScale = d3.scaleLinear()
      .domain([0, d3.max([...costsData, ...benefitsData], d => d.value) * 1.2])
      .range([height, 0]);
    
    // Axes
    const xAxis = d3.axisBottom(xScale)
      .tickFormat(d => `Year ${d}`);
    
    const yAxis = d3.axisLeft(yScale)
      .tickFormat(d => `$${d3.format(',')(d)}`);
    
    svg.append('g')
      .attr('transform', `translate(0,${height})`)
      .call(xAxis)
      .selectAll('text')
      .style('font-size', '12px');
    
    svg.append('g')
      .call(yAxis)
      .selectAll('text')
      .style('font-size', '12px');
    
    // X-axis label
    svg.append('text')
      .attr('transform', `translate(${width / 2}, ${height + margin.bottom - 10})`)
      .style('text-anchor', 'middle')
      .style('font-size', '14px')
      .text('Year');
    
    // Y-axis label
    svg.append('text')
      .attr('transform', 'rotate(-90)')
      .attr('y', -margin.left + 20)
      .attr('x', -(height / 2))
      .attr('dy', '1em')
      .style('text-anchor', 'middle')
      .style('font-size', '14px')
      .text('Value ($)');
    
    // Title
    svg.append('text')
      .attr('x', width / 2)
      .attr('y', -margin.top / 2)
      .attr('text-anchor', 'middle')
      .style('font-size', '16px')
      .style('font-weight', 'bold')
      .text('Cost-Benefit Analysis');
    
    // Draw bars for costs
    svg.selectAll('.cost-bar')
      .data(costsData)
      .enter()
      .append('rect')
      .attr('class', 'cost-bar')
      .attr('x', d => xScale(d.year))
      .attr('y', d => yScale(d.value))
      .attr('width', xScale.bandwidth() / 2)
      .attr('height', d => height - yScale(d.value))
      .attr('fill', '#e74c3c')
      .attr('opacity', 0.7)
      .on('mouseover', function(event, d) {
        d3.select(this).attr('opacity', 1);
        
        svg.append('text')
          .attr('class', 'tooltip')
          .attr('x', xScale(d.year) + xScale.bandwidth() / 4)
          .attr('y', yScale(d.value) - 10)
          .attr('text-anchor', 'middle')
          .style('font-size', '12px')
          .text(`$${d3.format(',')(d.value)}`);
      })
      .on('mouseout', function() {
        d3.select(this).attr('opacity', 0.7);
        svg.selectAll('.tooltip').remove();
      });
    
    // Draw bars for benefits
    svg.selectAll('.benefit-bar')
      .data(benefitsData)
      .enter()
      .append('rect')
      .attr('class', 'benefit-bar')
      .attr('x', d => xScale(d.year) + xScale.bandwidth() / 2)
      .attr('y', d => yScale(d.value))
      .attr('width', xScale.bandwidth() / 2)
      .attr('height', d => height - yScale(d.value))
      .attr('fill', '#2ecc71')
      .attr('opacity', 0.7)
      .on('mouseover', function(event, d) {
        d3.select(this).attr('opacity', 1);
        
        svg.append('text')
          .attr('class', 'tooltip')
          .attr('x', xScale(d.year) + 3 * xScale.bandwidth() / 4)
          .attr('y', yScale(d.value) - 10)
          .attr('text-anchor', 'middle')
          .style('font-size', '12px')
          .text(`$${d3.format(',')(d.value)}`);
      })
      .on('mouseout', function() {
        d3.select(this).attr('opacity', 0.7);
        svg.selectAll('.tooltip').remove();
      });
    
    // Draw lines for cumulative values
    const costLine = d3.line()
      .x(d => xScale(d.year) + xScale.bandwidth() / 4)
      .y(d => yScale(d.value));
    
    const benefitLine = d3.line()
      .x(d => xScale(d.year) + 3 * xScale.bandwidth() / 4)
      .y(d => yScale(d.value));
    
    svg.append('path')
      .datum(cumulativeCostsData)
      .attr('fill', 'none')
      .attr('stroke', '#c0392b')
      .attr('stroke-width', 2)
      .attr('d', costLine);
    
    svg.append('path')
      .datum(cumulativeBenefitsData)
      .attr('fill', 'none')
      .attr('stroke', '#27ae60')
      .attr('stroke-width', 2)
      .attr('d', benefitLine);
    
    // Add circles for cumulative data points
    svg.selectAll('.cost-point')
      .data(cumulativeCostsData)
      .enter()
      .append('circle')
      .attr('class', 'cost-point')
      .attr('cx', d => xScale(d.year) + xScale.bandwidth() / 4)
      .attr('cy', d => yScale(d.value))
      .attr('r', 4)
      .attr('fill', '#c0392b')
      .on('mouseover', function(event, d) {
        d3.select(this).attr('r', 6);
        
        svg.append('text')
          .attr('class', 'tooltip')
          .attr('x', xScale(d.year) + xScale.bandwidth() / 4)
          .attr('y', yScale(d.value) - 15)
          .attr('text-anchor', 'middle')
          .style('font-size', '12px')
          .text(`Cumulative: $${d3.format(',')(d.value)}`);
      })
      .on('mouseout', function() {
        d3.select(this).attr('r', 4);
        svg.selectAll('.tooltip').remove();
      });
    
    svg.selectAll('.benefit-point')
      .data(cumulativeBenefitsData)
      .enter()
      .append('circle')
      .attr('class', 'benefit-point')
      .attr('cx', d => xScale(d.year) + 3 * xScale.bandwidth() / 4)
      .attr('cy', d => yScale(d.value))
      .attr('r', 4)
      .attr('fill', '#27ae60')
      .on('mouseover', function(event, d) {
        d3.select(this).attr('r', 6);
        
        svg.append('text')
          .attr('class', 'tooltip')
          .attr('x', xScale(d.year) + 3 * xScale.bandwidth() / 4)
          .attr('y', yScale(d.value) - 15)
          .attr('text-anchor', 'middle')
          .style('font-size', '12px')
          .text(`Cumulative: $${d3.format(',')(d.value)}`);
      })
      .on('mouseout', function() {
        d3.select(this).attr('r', 4);
        svg.selectAll('.tooltip').remove();
      });
    
    // Add legend
    const legend = svg.append('g')
      .attr('transform', `translate(${width - 120}, 0)`);
    
    // Costs
    legend.append('rect')
      .attr('x', 0)
      .attr('y', 0)
      .attr('width', 15)
      .attr('height', 15)
      .attr('fill', '#e74c3c');
    
    legend.append('text')
      .attr('x', 20)
      .attr('y', 12.5)
      .style('font-size', '12px')
      .text('Costs');
    
    // Benefits
    legend.append('rect')
      .attr('x', 0)
      .attr('y', 25)
      .attr('width', 15)
      .attr('height', 15)
      .attr('fill', '#2ecc71');
    
    legend.append('text')
      .attr('x', 20)
      .attr('y', 37.5)
      .style('font-size', '12px')
      .text('Benefits');
    
    // Cumulative costs
    legend.append('line')
      .attr('x1', 0)
      .attr('y1', 50)
      .attr('x2', 15)
      .attr('y2', 50)
      .attr('stroke', '#c0392b')
      .attr('stroke-width', 2);
    
    legend.append('text')
      .attr('x', 20)
      .attr('y', 52.5)
      .style('font-size', '12px')
      .text('Cumulative Costs');
    
    // Cumulative benefits
    legend.append('line')
      .attr('x1', 0)
      .attr('y1', 75)
      .attr('x2', 15)
      .attr('y2', 75)
      .attr('stroke', '#27ae60')
      .attr('stroke-width', 2);
    
    legend.append('text')
      .attr('x', 20)
      .attr('y', 77.5)
      .style('font-size', '12px')
      .text('Cumulative Benefits');
    
  }, [data, timeframe]);
  
  return (
    <Card elevation={3} sx={{ mb: 4 }}>
      <CardHeader title="Cost-Benefit Analysis" />
      <CardContent>
        <div ref={chartRef} style={{ width: '100%', height: '500px' }} />
        {data && (
          <div style={{ marginTop: '20px' }}>
            <Typography variant="h6">Summary</Typography>
            <Typography variant="body1">
              Total Costs: ${data.totalCosts.toLocaleString()}
            </Typography>
            <Typography variant="body1">
              Total Benefits: ${data.totalBenefits.toLocaleString()}
            </Typography>
            <Typography variant="body1">
              Net Present Value: ${data.netPresentValue.toLocaleString()}
            </Typography>
            <Typography variant="body1">
              Benefit-Cost Ratio: {data.benefitCostRatio.toFixed(2)}
            </Typography>
            <Typography variant="body1" color={data.economicallyJustified ? 'success.main' : 'error.main'}>
              Economically Justified: {data.economicallyJustified ? 'Yes' : 'No'}
            </Typography>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default CostBenefitChart;
I'll continue providing more implementation files in subsequent messages, focusing on the core components of the AI-based RIA tool with enhanced visualization capabilities.
Continuing to provide deployment scripts, configuration files, and implementation files for the AI-based RIA tool as per the deployment guide.

Here's the next part of the implementation package - the stakeholder impact visualization component for the AI-based RIA tool:
javascript
// frontend/src/components/visualization/StakeholderImpactHeatmap.jsx
// Enhanced visualization component for stakeholder impact analysis

import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';
import { Card, CardHeader, CardContent, Typography, Box } from '@mui/material';

const StakeholderImpactHeatmap = ({ data }) => {
  const heatmapRef = useRef(null);
  
  useEffect(() => {
    if (!data || !data.stakeholders || !data.impactTypes || !heatmapRef.current) return;
    
    // Clear previous chart
    d3.select(heatmapRef.current).selectAll('*').remove();
    
    // Chart dimensions
    const margin = { top: 50, right: 50, bottom: 100, left: 150 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    
    // Create SVG
    const svg = d3.select(heatmapRef.current)
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
    
    // Prepare data
    const stakeholders = data.stakeholders;
    const impactTypes = data.impactTypes;
    
    // Create scales
    const xScale = d3.scaleBand()
      .domain(impactTypes.map(d => d.id))
      .range([0, width])
      .padding(0.05);
    
    const yScale = d3.scaleBand()
      .domain(stakeholders.map(d => d.id))
      .range([0, height])
      .padding(0.05);
    
    // Color scale for impact intensity
    const colorScale = d3.scaleSequential()
      .interpolator(d3.interpolateRdYlGn)
      .domain([-1, 1]); // -1 = negative impact, 0 = neutral, 1 = positive impact
    
    // Create the heatmap cells
    svg.selectAll('.impact-cell')
      .data(data.impacts)
      .enter()
      .append('rect')
      .attr('class', 'impact-cell')
      .attr('x', d => xScale(d.impactTypeId))
      .attr('y', d => yScale(d.stakeholderId))
      .attr('width', xScale.bandwidth())
      .attr('height', yScale.bandwidth())
      .attr('fill', d => colorScale(d.value))
      .attr('stroke', '#fff')
      .attr('stroke-width', 1)
      .on('mouseover', function(event, d) {
        // Highlight cell
        d3.select(this)
          .attr('stroke', '#000')
          .attr('stroke-width', 2);
        
        // Show tooltip
        const stakeholder = stakeholders.find(s => s.id === d.stakeholderId);
        const impactType = impactTypes.find(i => i.id === d.impactTypeId);
        
        const tooltip = svg.append('g')
          .attr('class', 'tooltip')
          .attr('transform', `translate(${xScale(d.impactTypeId) + xScale.bandwidth() / 2}, ${yScale(d.stakeholderId) + yScale.bandwidth() / 2})`);
        
        const tooltipRect = tooltip.append('rect')
          .attr('x', 10)
          .attr('y', -35)
          .attr('width', 220)
          .attr('height', 70)
          .attr('fill', '#f8f9fa')
          .attr('stroke', '#343a40')
          .attr('rx', 5)
          .attr('ry', 5);
        
        tooltip.append('text')
          .attr('x', 20)
          .attr('y', -15)
          .style('font-size', '12px')
          .style('font-weight', 'bold')
          .text(`${stakeholder.name}`);
        
        tooltip.append('text')
          .attr('x', 20)
          .attr('y', 5)
          .style('font-size', '12px')
          .text(`Impact: ${impactType.name}`);
        
        tooltip.append('text')
          .attr('x', 20)
          .attr('y', 25)
          .style('font-size', '12px')
          .text(`Value: ${d.value.toFixed(2)} (${d.value > 0 ? 'Positive' : d.value < 0 ? 'Negative' : 'Neutral'})`);
      })
      .on('mouseout', function() {
        // Remove highlight
        d3.select(this)
          .attr('stroke', '#fff')
          .attr('stroke-width', 1);
        
        // Remove tooltip
        svg.selectAll('.tooltip').remove();
      });
    
    // Add x-axis (impact types)
    svg.append('g')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(xScale).tickFormat(d => {
        const impactType = impactTypes.find(i => i.id === d);
        return impactType ? impactType.name : '';
      }))
      .selectAll('text')
      .attr('transform', 'rotate(-45)')
      .style('text-anchor', 'end')
      .attr('dx', '-.8em')
      .attr('dy', '.15em')
      .style('font-size', '12px');
    
    // Add y-axis (stakeholders)
    svg.append('g')
      .call(d3.axisLeft(yScale).tickFormat(d => {
        const stakeholder = stakeholders.find(s => s.id === d);
        return stakeholder ? stakeholder.name : '';
      }))
      .selectAll('text')
      .style('font-size', '12px');
    
    // Add title
    svg.append('text')
      .attr('x', width / 2)
      .attr('y', -margin.top / 2)
      .attr('text-anchor', 'middle')
      .style('font-size', '16px')
      .style('font-weight', 'bold')
      .text('Stakeholder Impact Analysis');
    
    // Add color legend
    const legendWidth = 200;
    const legendHeight = 20;
    
    const legendX = width - legendWidth;
    const legendY = -margin.top / 2 - 10;
    
    const legendScale = d3.scaleLinear()
      .domain([-1, 1])
      .range([0, legendWidth]);
    
    const legendAxis = d3.axisBottom(legendScale)
      .tickValues([-1, -0.5, 0, 0.5, 1])
      .tickFormat(d => d === -1 ? 'Negative' : d === 0 ? 'Neutral' : d === 1 ? 'Positive' : '');
    
    const defs = svg.append('defs');
    
    const gradient = defs.append('linearGradient')
      .attr('id', 'impact-gradient')
      .attr('x1', '0%')
      .attr('y1', '0%')
      .attr('x2', '100%')
      .attr('y2', '0%');
    
    gradient.selectAll('stop')
      .data([-1, -0.5, 0, 0.5, 1])
      .enter()
      .append('stop')
      .attr('offset', d => ((d + 1) / 2 * 100) + '%')
      .attr('stop-color', d => colorScale(d));
    
    const legend = svg.append('g')
      .attr('transform', `translate(${legendX},${legendY})`);
    
    legend.append('rect')
      .attr('width', legendWidth)
      .attr('height', legendHeight)
      .style('fill', 'url(#impact-gradient)');
    
    legend.append('g')
      .attr('transform', `translate(0,${legendHeight})`)
      .call(legendAxis)
      .selectAll('text')
      .style('font-size', '10px');
    
  }, [data]);
  
  return (
    <Card elevation={3} sx={{ mb: 4 }}>
      <CardHeader title="Stakeholder Impact Analysis" />
      <CardContent>
        <div ref={heatmapRef} style={{ width: '100%', height: '500px' }} />
        {data && (
          <Box mt={2}>
            <Typography variant="h6">Key Findings</Typography>
            <Typography variant="body1">
              Total Stakeholders: {data.stakeholders.length}
            </Typography>
            <Typography variant="body1">
              Impact Categories: {data.impactTypes.length}
            </Typography>
            <Typography variant="body1">
              Most Affected Stakeholder: {data.mostAffectedStakeholder?.name || 'N/A'}
            </Typography>
            <Typography variant="body1">
              Most Significant Impact Type: {data.mostSignificantImpactType?.name || 'N/A'}
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default StakeholderImpactHeatmap;
In the next message, I'll provide the implementation for the regulatory burden dashboard component, which is another key visualization element of the AI-based RIA tool.
Continuing to provide deployment and implementation files for the AI-based RIA tool as per the deployment guide.

Friday
Here's the next part of the implementation package - the regulatory burden dashboard component for the AI-based RIA tool:
javascript
// frontend/src/components/visualization/RegulatoryBurdenDashboard.jsx
// Enhanced visualization component for regulatory burden analysis

import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';
import { Card, CardHeader, CardContent, Typography, Grid, Box } from '@mui/material';

const RegulatoryBurdenDashboard = ({ data }) => {
  const pieChartRef = useRef(null);
  const barChartRef = useRef(null);
  
  useEffect(() => {
    if (!data || !data.burdenCategories || !pieChartRef.current || !barChartRef.current) return;
    
    // Clear previous charts
    d3.select(pieChartRef.current).selectAll('*').remove();
    d3.select(barChartRef.current).selectAll('*').remove();
    
    // Create pie chart for burden distribution
    createPieChart();
    
    // Create bar chart for stakeholder burden
    createBarChart();
    
    function createPieChart() {
      // Chart dimensions
      const width = 400;
      const height = 400;
      const radius = Math.min(width, height) / 2;
      
      // Create SVG
      const svg = d3.select(pieChartRef.current)
        .append('svg')
        .attr('width', width)
        .attr('height', height)
        .append('g')
        .attr('transform', `translate(${width / 2},${height / 2})`);
      
      // Prepare data
      const burdenCategories = data.burdenCategories;
      
      // Color scale
      const colorScale = d3.scaleOrdinal()
        .domain(burdenCategories.map(d => d.id))
        .range(d3.schemeCategory10);
      
      // Create pie chart
      const pie = d3.pie()
        .value(d => d.value)
        .sort(null);
      
      const arc = d3.arc()
        .innerRadius(radius * 0.4) // Create a donut chart
        .outerRadius(radius * 0.8);
      
      const outerArc = d3.arc()
        .innerRadius(radius * 0.9)
        .outerRadius(radius * 0.9);
      
      // Draw pie segments
      const arcs = svg.selectAll('.arc')
        .data(pie(burdenCategories))
        .enter()
        .append('g')
        .attr('class', 'arc');
      
      arcs.append('path')
        .attr('d', arc)
        .attr('fill', d => colorScale(d.data.id))
        .attr('stroke', '#fff')
        .attr('stroke-width', 2)
        .on('mouseover', function(event, d) {
          // Highlight segment
          d3.select(this)
            .attr('opacity', 0.8);
          
          // Show tooltip
          const tooltip = svg.append('g')
            .attr('class', 'tooltip');
          
          tooltip.append('rect')
            .attr('x', -100)
            .attr('y', -30)
            .attr('width', 200)
            .attr('height', 60)
            .attr('fill', '#f8f9fa')
            .attr('stroke', '#343a40')
            .attr('rx', 5)
            .attr('ry', 5);
          
          tooltip.append('text')
            .attr('x', 0)
            .attr('y', -10)
            .attr('text-anchor', 'middle')
            .style('font-size', '14px')
            .style('font-weight', 'bold')
            .text(d.data.name);
          
          tooltip.append('text')
            .attr('x', 0)
            .attr('y', 15)
            .attr('text-anchor', 'middle')
            .style('font-size', '14px')
            .text(`$${d3.format(',')(d.data.value)} (${(d.data.value / d3.sum(burdenCategories, d => d.value) * 100).toFixed(1)}%)`);
        })
        .on('mouseout', function() {
          // Remove highlight
          d3.select(this)
            .attr('opacity', 1);
          
          // Remove tooltip
          svg.selectAll('.tooltip').remove();
        });
      
      // Add labels
      const labelArc = d3.arc()
        .innerRadius(radius * 0.85)
        .outerRadius(radius * 0.85);
      
      // Add polylines for labels
      function midAngle(d) {
        return d.startAngle + (d.endAngle - d.startAngle) / 2;
      }
      
      arcs.append('polyline')
        .attr('points', function(d) {
          const pos = outerArc.centroid(d);
          pos[0] = radius * 0.95 * (midAngle(d) < Math.PI ? 1 : -1);
          return [arc.centroid(d), outerArc.centroid(d), pos];
        })
        .attr('stroke', '#333')
        .attr('fill', 'none')
        .attr('stroke-width', 1);
      
      arcs.append('text')
        .attr('transform', function(d) {
          const pos = outerArc.centroid(d);
          pos[0] = radius * 0.98 * (midAngle(d) < Math.PI ? 1 : -1);
          return `translate(${pos})`;
        })
        .attr('text-anchor', d => midAngle(d) < Math.PI ? 'start' : 'end')
        .style('font-size', '12px')
        .text(d => d.data.name);
      
      // Add center text
      svg.append('text')
        .attr('text-anchor', 'middle')
        .attr('dy', '-0.5em')
        .style('font-size', '16px')
        .style('font-weight', 'bold')
        .text('Total Burden');
      
      svg.append('text')
        .attr('text-anchor', 'middle')
        .attr('dy', '1em')
        .style('font-size', '16px')
        .text(`$${d3.format(',')(d3.sum(burdenCategories, d => d.value))}`);
    }
    
    function createBarChart() {
      // Chart dimensions
      const margin = { top: 40, right: 20, bottom: 120, left: 80 };
      const width = 600 - margin.left - margin.right;
      const height = 400 - margin.top - margin.bottom;
      
      // Create SVG
      const svg = d3.select(barChartRef.current)
        .append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom)
        .append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);
      
      // Prepare data
      const stakeholderBurden = data.stakeholderBurden;
      
      // Create scales
      const xScale = d3.scaleBand()
        .domain(stakeholderBurden.map(d => d.stakeholderId))
        .range([0, width])
        .padding(0.2);
      
      const yScale = d3.scaleLinear()
        .domain([0, d3.max(stakeholderBurden, d => d.totalBurden) * 1.1])
        .range([height, 0]);
      
      // Create axes
      const xAxis = d3.axisBottom(xScale)
        .tickFormat(d => {
          const stakeholder = data.stakeholders.find(s => s.id === d);
          return stakeholder ? stakeholder.name : '';
        });
      
      const yAxis = d3.axisLeft(yScale)
        .tickFormat(d => `$${d3.format(',')(d)}`);
      
      svg.append('g')
        .attr('transform', `translate(0,${height})`)
        .call(xAxis)
        .selectAll('text')
        .attr('transform', 'rotate(-45)')
        .style('text-anchor', 'end')
        .attr('dx', '-.8em')
        .attr('dy', '.15em')
        .style('font-size', '12px');
      
      svg.append('g')
        .call(yAxis)
        .selectAll('text')
        .style('font-size', '12px');
      
      // Add title
      svg.append('text')
        .attr('x', width / 2)
        .attr('y', -margin.top / 2)
        .attr('text-anchor', 'middle')
        .style('font-size', '16px')
        .style('font-weight', 'bold')
        .text('Regulatory Burden by Stakeholder');
      
      // Create stacked data
      const stackedData = d3.stack()
        .keys(data.burdenCategories.map(d => d.id))
        .value((obj, key) => {
          const categoryBurden = obj.burdenByCategory.find(item => item.categoryId === key);
          return categoryBurden ? categoryBurden.value : 0;
        })(stakeholderBurden);
      
      // Color scale
      const colorScale = d3.scaleOrdinal()
        .domain(data.burdenCategories.map(d => d.id))
        .range(d3.schemeCategory10);
      
      // Draw stacked bars
      svg.append('g')
        .selectAll('g')
        .data(stackedData)
        .enter()
        .append('g')
        .attr('fill', d => colorScale(d.key))
        .selectAll('rect')
        .data(d => d)
        .enter()
        .append('rect')
        .attr('x', d => xScale(d.data.stakeholderId))
        .attr('y', d => yScale(d[1]))
        .attr('height', d => yScale(d[0]) - yScale(d[1]))
        .attr('width', xScale.bandwidth())
        .on('mouseover', function(event, d) {
          // Highlight bar
          d3.select(this)
            .attr('opacity', 0.8);
          
          // Get category and stakeholder
          const categoryId = d3.select(this.parentNode).datum().key;
          const category = data.burdenCategories.find(c => c.id === categoryId);
          const stakeholder = data.stakeholders.find(s => s.id === d.data.stakeholderId);
          
          // Get value
          const categoryBurden = d.data.burdenByCategory.find(item => item.categoryId === categoryId);
          const value = categoryBurden ? categoryBurden.value : 0;
          
          // Show tooltip
          const tooltip = svg.append('g')
            .attr('class', 'tooltip')
            .attr('transform', `translate(${xScale(d.data.stakeholderId) + xScale.bandwidth() / 2}, ${yScale(d[1]) - 10})`);
          
          tooltip.append('rect')
            .attr('x', -100)
            .attr('y', -60)
            .attr('width', 200)
            .attr('height', 60)
            .attr('fill', '#f8f9fa')
            .attr('stroke', '#343a40')
            .attr('rx', 5)
            .attr('ry', 5);
          
          tooltip.append('text')
            .attr('x', 0)
            .attr('y', -40)
            .attr('text-anchor', 'middle')
            .style('font-size', '12px')
            .style('font-weight', 'bold')
            .text(stakeholder ? stakeholder.name : '');
          
          tooltip.append('text')
            .attr('x', 0)
            .attr('y', -20)
            .attr('text-anchor', 'middle')
            .style('font-size', '12px')
            .text(category ? category.name : '');
          
          tooltip.append('text')
            .attr('x', 0)
            .attr('y', 0)
            .attr('text-anchor', 'middle')
            .style('font-size', '12px')
            .text(`$${d3.format(',')(value)}`);
        })
        .on('mouseout', function() {
          // Remove highlight
          d3.select(this)
            .attr('opacity', 1);
          
          // Remove tooltip
          svg.selectAll('.tooltip').remove();
        });
      
      // Add legend
      const legend = svg.append('g')
        .attr('transform', `translate(0, ${height + margin.bottom - 50})`);
      
      const legendItems = legend.selectAll('.legend-item')
        .data(data.burdenCategories)
        .enter()
        .append('g')
        .attr('class', 'legend-item')
        .attr('transform', (d, i) => `translate(${i * (width / data.burdenCategories.length)}, 0)`);
      
      legendItems.append('rect')
        .attr('width', 15)
        .attr('height', 15)
        .attr('fill', d => colorScale(d.id));
      
      legendItems.append('text')
        .attr('x', 20)
        .attr('y', 12.5)
        .style('font-size', '10px')
        .text(d => d.name);
    }
    
  }, [data]);
  
  return (
    <Card elevation={3} sx={{ mb: 4 }}>
      <CardHeader title="Regulatory Burden Analysis" />
      <CardContent>
        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <div ref={pieChartRef} style={{ width: '100%', height: '400px' }} />
          </Grid>
          <Grid item xs={12} md={6}>
            <div ref={barChartRef} style={{ width: '100%', height: '400px' }} />
          </Grid>
        </Grid>
        {data && (
          <Box mt={2}>
            <Typography variant="h6">Key Findings</Typography>
            <Typography variant="body1">
              Total Regulatory Burden: ${data.totalBurden.toLocaleString()}
            </Typography>
            <Typography variant="body1">
              Administrative Burden: ${data.administrativeBurden.toLocaleString()} ({(data.administrativeBurden / data.totalBurden * 100).toFixed(1)}%)
            </Typography>
            <Typography variant="body1">
              Compliance Burden: ${data.complianceBurden.toLocaleString()} ({(data.complianceBurden / data.totalBurden * 100).toFixed(1)}%)
            </Typography>
            <Typography variant="body1">
              Most Affected Stakeholder: {data.mostAffectedStakeholder?.name || 'N/A'} (${data.mostAffectedStakeholder?.burden.toLocaleString() || 0})
            </Typography>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default RegulatoryBurdenDashboard;
